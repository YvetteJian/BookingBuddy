
# `com.mysql.cj.jdbc.Driver` is a JDBC driver class provided by the MySQL Connector/J driver.
# JDBC (Java Database Connectivity) is a standard API for connecting Java applications to relational databases.
# JDBC drivers implement the JDBC API and provide a way for Java applications to communicate with a particular database system.
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Spring Data JPA is a popular ORM (Object-Relational Mapping) framework for Java applications, built on top of the Spring Framework.

# a configuration property in Spring Boot that specifies the behavior of Hibernate's DDL (Data Definition Language) auto-generation feature.
# When this property is set to "update", Hibernate will automatically create, update or delete database tables based on the changes detected
# in the entity classes (Java classes that map to database tables) during the application startup.
# It is important to note that using the "update" option can potentially lead to data loss,
# as it can modify the schema of the database tables in ways that are not always predictable.
# Therefore, it is recommended to use this option with caution, especially in production environments.
# Other possible values for the "spring.jpa.hibernate.ddl-auto" property include
# "create", "create-drop", "validate", and "none",
# each of which provides a different level of control over the schema generation process.
spring.jpa.hibernate.ddl-auto=update

# a configuration property in Spring Boot that enables the display of SQL statements generated by Hibernate,
# a popular object-relational mapping (ORM) framework for Java.
# When this property is set to "true", Hibernate will output to the console or log file the SQL statements that are executed during the application runtime.
# This can be helpful during development and debugging, as it allows developers to see exactly what SQL statements are being executed and
# how they are being executed.
# However, it is generally not recommended to enable this property in a production environment, as it can have performance implications due to the overhead of generating and logging the SQL statements. Additionally, it may expose sensitive information such as database schema and table names to unauthorized users.
#
#Other properties that can be used in conjunction with "spring.jpa.show-sql" include "format_sql",
# which enables the formatting of the generated SQL statements for improved readability,
# and "use_sql_comments", which adds comments to the generated SQL statements to identify the source of each statement.
# These properties can also be useful during development and debugging, but should be disabled in a production environment for performance and security reasons.
spring.jpa.show-sql=true

# a configuration property in Spring Boot that sets the SQL dialect used by Hibernate when interacting with a MySQL database.
# The SQL dialect defines the specific syntax and features supported by the database,
# and is used by Hibernate to generate and execute SQL statements.
# In this case, the "MySQL5InnoDBDialect" dialect is used to support the InnoDB storage engine in MySQL version 5 and higher.
# Hibernate provides a number of different SQL dialects that can be used with different databases,
# each of which supports the specific syntax and features of that database.
# Choosing the appropriate dialect is important for ensuring that Hibernate generates correct and efficient SQL statements for the target database.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

spring.datasource.url=jdbc:mysql://bookbuddy.cnsodgmbxdtu.us-west-2.rds.amazonaws.com:3306/bookbuddy?createDatabaseIfNotExist=true&serverTimezone=UTC
spring.datasource.username=bookbuddy
spring.datasource.password=Yvettejian0303!